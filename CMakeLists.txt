#################################################################
# HEADER
#################################################################

# CMAKE_MINIMUM_REQUIRED(VERSION 2.8.7)
CMAKE_MINIMUM_REQUIRED(VERSION 3.10.0 FATAL_ERROR)
#------------------------------------------------
# PROJECT(FPL Fortran)
SET(PROJECT_NAME "FPL")
PROJECT(${PROJECT_NAME})
ENABLE_LANGUAGE(Fortran)
#------------------------------------------------
SET(VERSION_MAJOR "0")
SET(VERSION_MINOR "0")
SET(VERSION_BugFix "1")
SET(PROJECT_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_BugFix})
SET(CMAKE_PROJECT_DESCRIPTION "Fortran Parameter List, like dictionory")
SET(CMAKE_PROJECT_HOMEPAGE_URL "https://github.com/victorsndvg/FPL")
SET(TARGETS_EXPORT_NAME "${PROJECT_NAME}Targets")
SET(namespace "${PROJECT_NAME}")

INCLUDE(CMakePrintHelpers)
LIST( APPEND TARGET_COMPILE_DEF "-DUSE_CMAKE" )

IF(" ${CMAKE_CURRENT_SOURCE_DIR}" STREQUAL " ${CMAKE_CURRENT_BINARY_DIR}")
    MESSAGE(FATAL_ERROR "
    FATAL: In-source builds are not allowed.
    You should create a separate directory for build files.")
ENDIF()

#SHARED OR STATIC
OPTION(BUILD_SHARED_LIBS "Build shared library" ON)
IF (BUILD_SHARED_LIBS)
    MESSAGE(STATUS "${PROJECT_NAME} will be built as a shared library.")
ELSE()
    MESSAGE(STATUS "${PROJECT_NAME} will be built as a static library.")
ENDIF()

# BUILD TYPE
IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE Release CACHE STRING "Build type" FORCE)
ENDIF()

SET(EXTRA_FLAGS "")
INCLUDE(${PROJECT_SOURCE_DIR}/cmake/Compiler.cmake)
IF( $<CONFIG:Debug> )
    LIST( APPEND TARGET_COMPILE_DEF "-DDEBUG_VER" )
ENDIF()

# CREATING DIRECTORIES FOR EASIFEM_BASE
INCLUDE( GNUInstallDirs )
SET(
    CMAKE_Fortran_MODULE_DIRECTORY
    ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_INCLUDEDIR})
SET(
    CMAKE_LIBRARY_OUTPUT_DIRECTORY
    ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
SET(
    CMAKE_ARCHIVE_OUTPUT_DIRECTORY
    ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
SET(
    CMAKE_RUNTIME_OUTPUT_DIRECTORY
    ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})
SET(
    INSTALL_LIBDIR
    ${CMAKE_INSTALL_LIBDIR}
    CACHE PATH "install location of lib")
SET(
    INSTALL_INCLUDEDIR
    ${CMAKE_INSTALL_INCLUDEDIR}
    CACHE PATH "install location of include")
SET(
    INSTALL_BINDIR
    ${CMAKE_INSTALL_BINDIR}
    CACHE PATH "install location of bin")
IF(WIN32 AND NOT CYGWIN)
    SET(DEF_INSTALL_CMAKEDIR CMake)
ELSE()
    SET(DEF_INSTALL_CMAKEDIR share/cmake/${PROJECT_NAME})
ENDIF()
SET(INSTALL_CMAKEDIR ${DEF_INSTALL_CMAKEDIR} CACHE PATH "Installation directory for CMake files")

FOREACH(p LIB BIN INCLUDE CMAKE)
    FILE(TO_NATIVE_PATH ${CMAKE_INSTALL_PREFIX}/${INSTALL_${p}DIR} _path)
    MESSAGE(STATUS "Installing ${p} componenets to ${_path}")
ENDFOREACH()

OPTION(BUILD_SHARED_LIBS "Build shared library" ON)
IF(BUILD_SHARED_LIBS)
    MESSAGE(STATUS "${PROJECT_NAME} will be built as a shared library.")
ELSE()
    MESSAGE(STATUS "${PROJECT_NAME} will be built as a static library.")
ENDIF()

# INSTALLING easifemBase
IF(BUILD_SHARED_LIBS)
    ADD_LIBRARY(${PROJECT_NAME} SHARED "" )
ELSE()
    ADD_LIBRARY(${PROJECT_NAME} STATIC "")
ENDIF()

# Find OpenMP
OPTION(USE_OpenMP OFF)
IF(USE_OpenMP)
    FIND_PACKAGE(OpenMP)
    IF(OpenMP_FOUND)
        MESSAGE("OpenMP FOUND: ")
        LIST( APPEND TARGET_COMPILE_DEF "-DUSE_OpenMP" )
        LIST( APPEND TARGET_COMPILE_OPT ${OpenMP_Fortran_FLAGS}  )
    ELSE()
        MESSAGE("OpenMP NOT FOUND: building without it")
    ENDIF()
ENDIF()


IF( $<CONFIG:Debug> )
    LIST( APPEND TARGET_COMPILE_DEF "-DDEBUG_VER" )
ENDIF()

###################################################
INCLUDE(${CMAKE_SOURCE_DIR}/src/lib/CMakeLists.txt)
###################################################

LIST(APPEND CMAKE_PREFIX_PATH "$ENV{EASIFEM_EXTPKGS}")
FIND_PACKAGE( PENF REQUIRED )
IF( PENF_FOUND )
  GET_TARGET_PROPERTY(
    PENF_INCLUDEDIR
    PENF::PENF
    INTERFACE_INCLUDE_DIRECTORIES)
  MESSAGE(STATUS "PENF found")
ELSE()
  MESSAGE(STATUS "PENF not found")
ENDIF()

TARGET_COMPILE_OPTIONS(
  ${PROJECT_NAME}
  PRIVATE
  ${TARGET_COMPILE_OPT}
  ${FORTRAN_FLAGS}
  "$<$<CONFIG:Debug>:${FORTRAN_FLAGS_DEBUG}>"
  "$<$<CONFIG:Release>:${FORTRAN_FLAGS_RELEASE}>")

TARGET_COMPILE_DEFINITIONS(
  ${PROJECT_NAME}
  PUBLIC
  ${TARGET_COMPILE_DEF})

TARGET_LINK_LIBRARIES(
  ${PROJECT_NAME}
  PUBLIC
  "$<$<BOOL:${OpenMP_FOUND}>:${OpenMP_Fortran_LIBRARIES}>"
  PENF::PENF)

SET_TARGET_PROPERTIES(
    ${PROJECT_NAME}
        PROPERTIES
        POSITION_INDEPENDENT_CODE 1
        SOVERSION ${VERSION_MAJOR}
        OUTPUT_NAME ${PROJECT_NAME}
        LIBRARY_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
        ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
        RUNTIME_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
        MACOSX_RPATH ON
        WINDOWS_EXPORT_ALL_SYMBOLS ON)

TARGET_INCLUDE_DIRECTORIES(
    ${PROJECT_NAME}
    PUBLIC
    $<BUILD_INTERFACE:${CMAKE_Fortran_MODULE_DIRECTORY}>
    $<INSTALL_INTERFACE:${INSTALL_INCLUDEDIR}>
    "${PENF_INCLUDEDIR}")


INSTALL(
    TARGETS
        ${PROJECT_NAME}
    EXPORT
        ${TARGETS_EXPORT_NAME}
        ARCHIVE
        DESTINATION ${INSTALL_LIBDIR}
        COMPONENT lib
        RUNTIME
        DESTINATION ${INSTALL_BINDIR}
        COMPONENT bin
        LIBRARY
        DESTINATION ${INSTALL_LIBDIR}
        COMPONENT lib)

INSTALL(
    DIRECTORY
    ${CMAKE_Fortran_MODULE_DIRECTORY}
    DESTINATION "./"
    COMPONENT lib)

INSTALL(
    EXPORT
    ${TARGETS_EXPORT_NAME}
    NAMESPACE ${namespace}::
    DESTINATION ${INSTALL_CMAKEDIR}
    COMPONENT dev)

INCLUDE(CMakePackageConfigHelpers)

configure_package_config_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/Config.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
    INSTALL_DESTINATION ${INSTALL_CMAKEDIR})
IF(BUILD_SHARED_LIBS OR PROJECT_VERSION_MAJOR EQUAL 0)
    # Due to the uncertain ABI compatibility of Fortran shared libraries
    # limit compatibility for dynamic linking to same minor version.
    SET(COMPATIBILITY AnyNewerVersion)
    # set(COMPATIBILITY SameMinorVersion)
ELSE()
    # Require API compatibility via semantic versioning for static linking.
    SET(COMPATIBILITY AnyNewerVersion)
    # set(COMPATIBILITY SameMajorVersion)
ENDIF()

write_basic_package_version_file(
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
    VERSION "${PROJECT_VERSION}"
    COMPATIBILITY ${COMPATIBILITY})

INSTALL(
    FILES
        ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
        ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
    DESTINATION
        ${INSTALL_CMAKEDIR})
